// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/core/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryMailboxesRequest ...
type QueryMailboxesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMailboxesRequest) Reset()         { *m = QueryMailboxesRequest{} }
func (m *QueryMailboxesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxesRequest) ProtoMessage()    {}
func (*QueryMailboxesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{0}
}
func (m *QueryMailboxesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxesRequest.Merge(m, src)
}
func (m *QueryMailboxesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxesRequest proto.InternalMessageInfo

func (m *QueryMailboxesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMailboxesResponse ...
type QueryMailboxesResponse struct {
	Mailboxes []Mailbox `protobuf:"bytes,1,rep,name=mailboxes,proto3" json:"mailboxes"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMailboxesResponse) Reset()         { *m = QueryMailboxesResponse{} }
func (m *QueryMailboxesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxesResponse) ProtoMessage()    {}
func (*QueryMailboxesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{1}
}
func (m *QueryMailboxesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxesResponse.Merge(m, src)
}
func (m *QueryMailboxesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxesResponse proto.InternalMessageInfo

func (m *QueryMailboxesResponse) GetMailboxes() []Mailbox {
	if m != nil {
		return m.Mailboxes
	}
	return nil
}

func (m *QueryMailboxesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMailboxRequest ...
type QueryMailboxRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMailboxRequest) Reset()         { *m = QueryMailboxRequest{} }
func (m *QueryMailboxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxRequest) ProtoMessage()    {}
func (*QueryMailboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{2}
}
func (m *QueryMailboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxRequest.Merge(m, src)
}
func (m *QueryMailboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxRequest proto.InternalMessageInfo

func (m *QueryMailboxRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryMailboxResponse ...
type QueryMailboxResponse struct {
	Mailbox Mailbox `protobuf:"bytes,1,opt,name=mailbox,proto3" json:"mailbox"`
}

func (m *QueryMailboxResponse) Reset()         { *m = QueryMailboxResponse{} }
func (m *QueryMailboxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxResponse) ProtoMessage()    {}
func (*QueryMailboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{3}
}
func (m *QueryMailboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxResponse.Merge(m, src)
}
func (m *QueryMailboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxResponse proto.InternalMessageInfo

func (m *QueryMailboxResponse) GetMailbox() Mailbox {
	if m != nil {
		return m.Mailbox
	}
	return Mailbox{}
}

// QueryDeliveredRequest ...
type QueryDeliveredRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryDeliveredRequest) Reset()         { *m = QueryDeliveredRequest{} }
func (m *QueryDeliveredRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeliveredRequest) ProtoMessage()    {}
func (*QueryDeliveredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{4}
}
func (m *QueryDeliveredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeliveredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeliveredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeliveredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeliveredRequest.Merge(m, src)
}
func (m *QueryDeliveredRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeliveredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeliveredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeliveredRequest proto.InternalMessageInfo

func (m *QueryDeliveredRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryDeliveredRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// QueryDeliveredResponse ...
type QueryDeliveredResponse struct {
	Delivered bool `protobuf:"varint,1,opt,name=delivered,proto3" json:"delivered,omitempty"`
}

func (m *QueryDeliveredResponse) Reset()         { *m = QueryDeliveredResponse{} }
func (m *QueryDeliveredResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeliveredResponse) ProtoMessage()    {}
func (*QueryDeliveredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{5}
}
func (m *QueryDeliveredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeliveredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeliveredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeliveredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeliveredResponse.Merge(m, src)
}
func (m *QueryDeliveredResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeliveredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeliveredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeliveredResponse proto.InternalMessageInfo

func (m *QueryDeliveredResponse) GetDelivered() bool {
	if m != nil {
		return m.Delivered
	}
	return false
}

// RecipientIsmRequest ...
type RecipientIsmRequest struct {
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *RecipientIsmRequest) Reset()         { *m = RecipientIsmRequest{} }
func (m *RecipientIsmRequest) String() string { return proto.CompactTextString(m) }
func (*RecipientIsmRequest) ProtoMessage()    {}
func (*RecipientIsmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{6}
}
func (m *RecipientIsmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientIsmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientIsmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientIsmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientIsmRequest.Merge(m, src)
}
func (m *RecipientIsmRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecipientIsmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientIsmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientIsmRequest proto.InternalMessageInfo

func (m *RecipientIsmRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// RecipientIsmResponse ...
type RecipientIsmResponse struct {
	IsmId string `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3" json:"ism_id,omitempty"`
}

func (m *RecipientIsmResponse) Reset()         { *m = RecipientIsmResponse{} }
func (m *RecipientIsmResponse) String() string { return proto.CompactTextString(m) }
func (*RecipientIsmResponse) ProtoMessage()    {}
func (*RecipientIsmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{7}
}
func (m *RecipientIsmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecipientIsmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecipientIsmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecipientIsmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecipientIsmResponse.Merge(m, src)
}
func (m *RecipientIsmResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecipientIsmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecipientIsmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecipientIsmResponse proto.InternalMessageInfo

func (m *RecipientIsmResponse) GetIsmId() string {
	if m != nil {
		return m.IsmId
	}
	return ""
}

// QueryVerifyDryRunRequest ...
type QueryVerifyDryRunRequest struct {
	IsmId    string `protobuf:"bytes,1,opt,name=ism_id,json=ismId,proto3" json:"ism_id,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QueryVerifyDryRunRequest) Reset()         { *m = QueryVerifyDryRunRequest{} }
func (m *QueryVerifyDryRunRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyDryRunRequest) ProtoMessage()    {}
func (*QueryVerifyDryRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{8}
}
func (m *QueryVerifyDryRunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyDryRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyDryRunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyDryRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyDryRunRequest.Merge(m, src)
}
func (m *QueryVerifyDryRunRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyDryRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyDryRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyDryRunRequest proto.InternalMessageInfo

func (m *QueryVerifyDryRunRequest) GetIsmId() string {
	if m != nil {
		return m.IsmId
	}
	return ""
}

func (m *QueryVerifyDryRunRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVerifyDryRunRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// QueryVerifyDryRunResponse ...
type QueryVerifyDryRunResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *QueryVerifyDryRunResponse) Reset()         { *m = QueryVerifyDryRunResponse{} }
func (m *QueryVerifyDryRunResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyDryRunResponse) ProtoMessage()    {}
func (*QueryVerifyDryRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_312c522f209452f6, []int{9}
}
func (m *QueryVerifyDryRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyDryRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyDryRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyDryRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyDryRunResponse.Merge(m, src)
}
func (m *QueryVerifyDryRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyDryRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyDryRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyDryRunResponse proto.InternalMessageInfo

func (m *QueryVerifyDryRunResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func init() {
	proto.RegisterType((*QueryMailboxesRequest)(nil), "hyperlane.core.v1.QueryMailboxesRequest")
	proto.RegisterType((*QueryMailboxesResponse)(nil), "hyperlane.core.v1.QueryMailboxesResponse")
	proto.RegisterType((*QueryMailboxRequest)(nil), "hyperlane.core.v1.QueryMailboxRequest")
	proto.RegisterType((*QueryMailboxResponse)(nil), "hyperlane.core.v1.QueryMailboxResponse")
	proto.RegisterType((*QueryDeliveredRequest)(nil), "hyperlane.core.v1.QueryDeliveredRequest")
	proto.RegisterType((*QueryDeliveredResponse)(nil), "hyperlane.core.v1.QueryDeliveredResponse")
	proto.RegisterType((*RecipientIsmRequest)(nil), "hyperlane.core.v1.RecipientIsmRequest")
	proto.RegisterType((*RecipientIsmResponse)(nil), "hyperlane.core.v1.RecipientIsmResponse")
	proto.RegisterType((*QueryVerifyDryRunRequest)(nil), "hyperlane.core.v1.QueryVerifyDryRunRequest")
	proto.RegisterType((*QueryVerifyDryRunResponse)(nil), "hyperlane.core.v1.QueryVerifyDryRunResponse")
}

func init() { proto.RegisterFile("hyperlane/core/v1/query.proto", fileDescriptor_312c522f209452f6) }

var fileDescriptor_312c522f209452f6 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0xb7, 0x4b, 0xf8, 0xd3, 0x07, 0xf2, 0x4b, 0x18, 0xe0, 0xe7, 0xb2, 0x59, 0x16, 0xd2,
	0x28, 0xff, 0x94, 0x4e, 0x16, 0xfc, 0x73, 0xf0, 0x60, 0x82, 0x04, 0xc3, 0x41, 0xa3, 0x3d, 0x68,
	0xe2, 0x65, 0x33, 0xbb, 0x1d, 0xcb, 0xc4, 0x6d, 0xa7, 0x74, 0xba, 0x1b, 0x1a, 0x42, 0xa2, 0xbe,
	0x01, 0x49, 0x3c, 0x7b, 0x35, 0x1e, 0x7d, 0x19, 0x1c, 0x49, 0xb8, 0x78, 0x32, 0x06, 0x4c, 0x7c,
	0x1b, 0x66, 0xa7, 0xd3, 0x76, 0x17, 0xba, 0xc0, 0xa5, 0xe9, 0x3c, 0x33, 0xdf, 0x79, 0x3e, 0xcf,
	0x33, 0xdf, 0xc9, 0xc0, 0xdc, 0x6e, 0xe4, 0xd3, 0xa0, 0x45, 0x3c, 0x8a, 0x9b, 0x3c, 0xa0, 0xb8,
	0x53, 0xc3, 0x7b, 0x6d, 0x1a, 0x44, 0xa6, 0x1f, 0xf0, 0x90, 0xa3, 0xc9, 0x74, 0xda, 0xec, 0x4e,
	0x9b, 0x9d, 0x5a, 0x79, 0xb5, 0xc9, 0x85, 0xcb, 0x05, 0x6e, 0x10, 0x41, 0xe3, 0xb5, 0xb8, 0x53,
	0x6b, 0xd0, 0x90, 0xd4, 0xb0, 0x4f, 0x1c, 0xe6, 0x91, 0x90, 0x71, 0x2f, 0x96, 0x97, 0x73, 0x76,
	0x0f, 0x23, 0x9f, 0x0a, 0x35, 0x5d, 0x71, 0x38, 0x77, 0x5a, 0x14, 0x13, 0x9f, 0x61, 0xe2, 0x79,
	0x3c, 0x94, 0xda, 0x64, 0x76, 0x92, 0xb8, 0xcc, 0xe3, 0x58, 0x7e, 0x55, 0x68, 0xda, 0xe1, 0x0e,
	0x97, 0xbf, 0xb8, 0xfb, 0x17, 0x47, 0x8d, 0x3a, 0xcc, 0xbc, 0xea, 0x72, 0x3c, 0x27, 0xac, 0xd5,
	0xe0, 0xfb, 0x54, 0x58, 0x74, 0xaf, 0x4d, 0x45, 0x88, 0xb6, 0x01, 0x32, 0xa4, 0x92, 0xb6, 0xa0,
	0x2d, 0x8f, 0xaf, 0x2f, 0x9a, 0x31, 0xbf, 0xd9, 0xe5, 0x37, 0xe3, 0x5a, 0x15, 0xbf, 0xf9, 0x92,
	0x38, 0x54, 0x69, 0xad, 0x1e, 0xa5, 0xf1, 0x4d, 0x83, 0xff, 0x2f, 0x66, 0x10, 0x3e, 0xf7, 0x04,
	0x45, 0x4f, 0x41, 0x77, 0x93, 0x60, 0x49, 0x5b, 0x18, 0x5a, 0x1e, 0x5f, 0x2f, 0x9b, 0x97, 0x9a,
	0x66, 0x2a, 0xe1, 0xa6, 0x7e, 0xfc, 0x6b, 0xbe, 0xf0, 0xfd, 0xef, 0x8f, 0x55, 0xcd, 0xca, 0x74,
	0xe8, 0x59, 0x1f, 0x67, 0x51, 0x72, 0x2e, 0x5d, 0xcb, 0x19, 0x13, 0xf4, 0x81, 0xde, 0x81, 0xa9,
	0x5e, 0xce, 0xa4, 0x0f, 0xff, 0x41, 0x91, 0xd9, 0xb2, 0x7e, 0xdd, 0x2a, 0x32, 0xdb, 0x78, 0x03,
	0xd3, 0xfd, 0xcb, 0x54, 0x31, 0x4f, 0x60, 0x54, 0x41, 0xa9, 0x66, 0xdd, 0xb0, 0x94, 0x44, 0x65,
	0x6c, 0xab, 0x93, 0xd8, 0xa2, 0x2d, 0xd6, 0xa1, 0x01, 0xb5, 0x07, 0x10, 0xa0, 0x39, 0x00, 0x97,
	0x0a, 0x41, 0x1c, 0x5a, 0x67, 0xb6, 0xac, 0x58, 0xb7, 0x74, 0x15, 0xd9, 0xb1, 0x8d, 0x87, 0xaa,
	0xdf, 0x3d, 0xfb, 0x28, 0xc4, 0x0a, 0xe8, 0x76, 0x12, 0x94, 0xfb, 0x8d, 0x59, 0x59, 0xc0, 0xd8,
	0x80, 0x29, 0x8b, 0x36, 0x99, 0xcf, 0xa8, 0x17, 0xee, 0x08, 0x37, 0xc9, 0x5e, 0x01, 0x3d, 0x48,
	0xc2, 0x0a, 0x22, 0x0b, 0x18, 0x6b, 0x30, 0xdd, 0x2f, 0x52, 0xa9, 0x66, 0x60, 0x84, 0x09, 0xb7,
	0x9e, 0x72, 0x0f, 0x33, 0xe1, 0xee, 0xd8, 0x86, 0x03, 0x25, 0xc9, 0xf6, 0x9a, 0x06, 0xec, 0x5d,
	0xb4, 0x15, 0x44, 0x56, 0xdb, 0x4b, 0x12, 0xe5, 0x4b, 0x50, 0x09, 0x46, 0x55, 0x6d, 0xaa, 0xd4,
	0x64, 0x88, 0xca, 0x30, 0xe6, 0xd2, 0x90, 0xd8, 0x24, 0x24, 0xa5, 0x21, 0x39, 0x95, 0x8e, 0x8d,
	0x47, 0x30, 0x9b, 0x93, 0x48, 0xc1, 0x95, 0x61, 0xac, 0xd3, 0x8d, 0xb3, 0xb4, 0x0d, 0xe9, 0x78,
	0xfd, 0x74, 0x18, 0x86, 0xa5, 0x12, 0x7d, 0xd4, 0x40, 0x4f, 0x3d, 0x8b, 0x96, 0x73, 0x4e, 0x33,
	0xf7, 0xe2, 0x94, 0x57, 0x6e, 0xb0, 0x32, 0x06, 0x31, 0xe6, 0x3f, 0x9d, 0xfe, 0xf9, 0x52, 0x9c,
	0x45, 0xb7, 0x70, 0x76, 0xd7, 0x3b, 0x35, 0x9c, 0x99, 0xfb, 0x83, 0x06, 0xa3, 0x4a, 0x86, 0x16,
	0xaf, 0xd9, 0x37, 0xc9, 0xbf, 0x74, 0xed, 0x3a, 0x95, 0xfd, 0xb6, 0xcc, 0x5e, 0x45, 0x95, 0x01,
	0xd9, 0xf1, 0x01, 0xb3, 0x0f, 0xd1, 0x57, 0x0d, 0xf4, 0xd4, 0x4a, 0x83, 0xdb, 0x70, 0xd1, 0xb5,
	0x83, 0xdb, 0x70, 0xc9, 0x97, 0xc6, 0x63, 0x09, 0xf2, 0x00, 0x6d, 0x5c, 0x05, 0x82, 0x53, 0xa7,
	0xe2, 0x83, 0xcc, 0xfe, 0x87, 0xe8, 0x48, 0x83, 0x89, 0x5e, 0x0b, 0xe6, 0xf6, 0x29, 0xc7, 0xd8,
	0xb9, 0x7d, 0xca, 0xf3, 0xb2, 0x81, 0x25, 0xde, 0x0a, 0x5a, 0xea, 0xc7, 0x4b, 0x2f, 0x41, 0x9d,
	0x09, 0x17, 0x1f, 0xa4, 0xc3, 0x43, 0xf4, 0x59, 0x83, 0x89, 0x5e, 0xe3, 0xa1, 0xbb, 0x83, 0x7a,
	0x91, 0x73, 0x0f, 0xca, 0xf7, 0x6e, 0xb6, 0xf8, 0xea, 0x43, 0x94, 0x7e, 0x8e, 0xea, 0x76, 0x10,
	0xd5, 0x83, 0xb6, 0xb7, 0xf9, 0xe2, 0xf8, 0xac, 0xaa, 0x9d, 0x9c, 0x55, 0xb5, 0xdf, 0x67, 0x55,
	0xed, 0xe8, 0xbc, 0x5a, 0x38, 0x39, 0xaf, 0x16, 0x7e, 0x9e, 0x57, 0x0b, 0x6f, 0xef, 0x3b, 0x2c,
	0xdc, 0x6d, 0x37, 0xcc, 0x26, 0x77, 0x71, 0x18, 0xf0, 0xe8, 0x3d, 0x15, 0xa2, 0x45, 0x83, 0x6c,
	0xb7, 0x35, 0xf5, 0x64, 0xed, 0xc7, 0xaf, 0x90, 0x7c, 0x82, 0x1a, 0x23, 0xf2, 0xf1, 0xd8, 0xf8,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xd8, 0xf5, 0x91, 0x02, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Mailboxes ...
	Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error)
	// Mailbox ...
	Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error)
	// Delivered ...
	Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error)
	// RecipientIsm returns the recipient ISM ID for a registered application.
	//
	// The recipient is globally unique as every application ID registered on the
	// core module is unique. This means that one application cannot be registered
	// to two mailboxes, resulting in a mailbox-independent lookup.
	RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error)
	// VerifyDryRun ...
	VerifyDryRun(ctx context.Context, in *QueryVerifyDryRunRequest, opts ...grpc.CallOption) (*QueryVerifyDryRunResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Mailboxes(ctx context.Context, in *QueryMailboxesRequest, opts ...grpc.CallOption) (*QueryMailboxesResponse, error) {
	out := new(QueryMailboxesResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.v1.Query/Mailboxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error) {
	out := new(QueryMailboxResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.v1.Query/Mailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Delivered(ctx context.Context, in *QueryDeliveredRequest, opts ...grpc.CallOption) (*QueryDeliveredResponse, error) {
	out := new(QueryDeliveredResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.v1.Query/Delivered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecipientIsm(ctx context.Context, in *RecipientIsmRequest, opts ...grpc.CallOption) (*RecipientIsmResponse, error) {
	out := new(RecipientIsmResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.v1.Query/RecipientIsm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyDryRun(ctx context.Context, in *QueryVerifyDryRunRequest, opts ...grpc.CallOption) (*QueryVerifyDryRunResponse, error) {
	out := new(QueryVerifyDryRunResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.v1.Query/VerifyDryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Mailboxes ...
	Mailboxes(context.Context, *QueryMailboxesRequest) (*QueryMailboxesResponse, error)
	// Mailbox ...
	Mailbox(context.Context, *QueryMailboxRequest) (*QueryMailboxResponse, error)
	// Delivered ...
	Delivered(context.Context, *QueryDeliveredRequest) (*QueryDeliveredResponse, error)
	// RecipientIsm returns the recipient ISM ID for a registered application.
	//
	// The recipient is globally unique as every application ID registered on the
	// core module is unique. This means that one application cannot be registered
	// to two mailboxes, resulting in a mailbox-independent lookup.
	RecipientIsm(context.Context, *RecipientIsmRequest) (*RecipientIsmResponse, error)
	// VerifyDryRun ...
	VerifyDryRun(context.Context, *QueryVerifyDryRunRequest) (*QueryVerifyDryRunResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Mailboxes(ctx context.Context, req *QueryMailboxesRequest) (*QueryMailboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailboxes not implemented")
}
func (*UnimplementedQueryServer) Mailbox(ctx context.Context, req *QueryMailboxRequest) (*QueryMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailbox not implemented")
}
func (*UnimplementedQueryServer) Delivered(ctx context.Context, req *QueryDeliveredRequest) (*QueryDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delivered not implemented")
}
func (*UnimplementedQueryServer) RecipientIsm(ctx context.Context, req *RecipientIsmRequest) (*RecipientIsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipientIsm not implemented")
}
func (*UnimplementedQueryServer) VerifyDryRun(ctx context.Context, req *QueryVerifyDryRunRequest) (*QueryVerifyDryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDryRun not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Mailboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.v1.Query/Mailboxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailboxes(ctx, req.(*QueryMailboxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.v1.Query/Mailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailbox(ctx, req.(*QueryMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Delivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Delivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.v1.Query/Delivered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Delivered(ctx, req.(*QueryDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecipientIsm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipientIsmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecipientIsm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.v1.Query/RecipientIsm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecipientIsm(ctx, req.(*RecipientIsmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyDryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyDryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyDryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.v1.Query/VerifyDryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyDryRun(ctx, req.(*QueryVerifyDryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.core.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mailboxes",
			Handler:    _Query_Mailboxes_Handler,
		},
		{
			MethodName: "Mailbox",
			Handler:    _Query_Mailbox_Handler,
		},
		{
			MethodName: "Delivered",
			Handler:    _Query_Delivered_Handler,
		},
		{
			MethodName: "RecipientIsm",
			Handler:    _Query_RecipientIsm_Handler,
		},
		{
			MethodName: "VerifyDryRun",
			Handler:    _Query_VerifyDryRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/core/v1/query.proto",
}

func (m *QueryMailboxesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mailboxes) > 0 {
		for iNdEx := len(m.Mailboxes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mailboxes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mailbox.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeliveredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeliveredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeliveredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeliveredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeliveredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeliveredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delivered {
		i--
		if m.Delivered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecipientIsmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientIsmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientIsmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecipientIsmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecipientIsmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecipientIsmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IsmId) > 0 {
		i -= len(m.IsmId)
		copy(dAtA[i:], m.IsmId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyDryRunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyDryRunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyDryRunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IsmId) > 0 {
		i -= len(m.IsmId)
		copy(dAtA[i:], m.IsmId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyDryRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyDryRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyDryRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMailboxesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mailboxes) > 0 {
		for _, e := range m.Mailboxes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Mailbox.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDeliveredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeliveredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delivered {
		n += 2
	}
	return n
}

func (m *RecipientIsmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RecipientIsmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IsmId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyDryRunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IsmId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyDryRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verified {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMailboxesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailboxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mailboxes = append(m.Mailboxes, Mailbox{})
			if err := m.Mailboxes[len(m.Mailboxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mailbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeliveredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeliveredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeliveredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeliveredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeliveredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeliveredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delivered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipientIsmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientIsmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientIsmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecipientIsmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecipientIsmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecipientIsmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyDryRunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyDryRunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyDryRunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyDryRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyDryRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyDryRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
