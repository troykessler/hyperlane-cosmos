// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hyperlane/core/post_dispatch/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateIgp ...
type MsgCreateIgp struct {
	// owner is the message sender.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgCreateIgp) Reset()         { *m = MsgCreateIgp{} }
func (m *MsgCreateIgp) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIgp) ProtoMessage()    {}
func (*MsgCreateIgp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{0}
}
func (m *MsgCreateIgp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIgp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIgp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIgp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIgp.Merge(m, src)
}
func (m *MsgCreateIgp) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIgp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIgp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIgp proto.InternalMessageInfo

func (m *MsgCreateIgp) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateIgp) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// MsgCreateIgpResponse ...
type MsgCreateIgpResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateIgpResponse) Reset()         { *m = MsgCreateIgpResponse{} }
func (m *MsgCreateIgpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIgpResponse) ProtoMessage()    {}
func (*MsgCreateIgpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{1}
}
func (m *MsgCreateIgpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIgpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIgpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIgpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIgpResponse.Merge(m, src)
}
func (m *MsgCreateIgpResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIgpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIgpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIgpResponse proto.InternalMessageInfo

func (m *MsgCreateIgpResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgSetIgpOwner ...
type MsgSetIgpOwner struct {
	// owner is the message sender.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// igp_id
	IgpId string `protobuf:"bytes,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	// new_owner
	NewOwner string `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgSetIgpOwner) Reset()         { *m = MsgSetIgpOwner{} }
func (m *MsgSetIgpOwner) String() string { return proto.CompactTextString(m) }
func (*MsgSetIgpOwner) ProtoMessage()    {}
func (*MsgSetIgpOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{2}
}
func (m *MsgSetIgpOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIgpOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIgpOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIgpOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIgpOwner.Merge(m, src)
}
func (m *MsgSetIgpOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIgpOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIgpOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIgpOwner proto.InternalMessageInfo

func (m *MsgSetIgpOwner) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetIgpOwner) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *MsgSetIgpOwner) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

// MsgCreateIgpResponse ...
type MsgSetIgpOwnerResponse struct {
}

func (m *MsgSetIgpOwnerResponse) Reset()         { *m = MsgSetIgpOwnerResponse{} }
func (m *MsgSetIgpOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetIgpOwnerResponse) ProtoMessage()    {}
func (*MsgSetIgpOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{3}
}
func (m *MsgSetIgpOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIgpOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIgpOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIgpOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIgpOwnerResponse.Merge(m, src)
}
func (m *MsgSetIgpOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIgpOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIgpOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIgpOwnerResponse proto.InternalMessageInfo

// MsgSetDestinationGasConfig ...
type MsgSetDestinationGasConfig struct {
	// owner ...
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// igp_id ...
	IgpId string `protobuf:"bytes,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	// destination_gas_config ...
	DestinationGasConfig *DestinationGasConfig `protobuf:"bytes,3,opt,name=destination_gas_config,json=destinationGasConfig,proto3" json:"destination_gas_config,omitempty"`
}

func (m *MsgSetDestinationGasConfig) Reset()         { *m = MsgSetDestinationGasConfig{} }
func (m *MsgSetDestinationGasConfig) String() string { return proto.CompactTextString(m) }
func (*MsgSetDestinationGasConfig) ProtoMessage()    {}
func (*MsgSetDestinationGasConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{4}
}
func (m *MsgSetDestinationGasConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDestinationGasConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDestinationGasConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDestinationGasConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDestinationGasConfig.Merge(m, src)
}
func (m *MsgSetDestinationGasConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDestinationGasConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDestinationGasConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDestinationGasConfig proto.InternalMessageInfo

func (m *MsgSetDestinationGasConfig) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSetDestinationGasConfig) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *MsgSetDestinationGasConfig) GetDestinationGasConfig() *DestinationGasConfig {
	if m != nil {
		return m.DestinationGasConfig
	}
	return nil
}

// MsgSetDestinationGasConfigResponse ...
type MsgSetDestinationGasConfigResponse struct {
}

func (m *MsgSetDestinationGasConfigResponse) Reset()         { *m = MsgSetDestinationGasConfigResponse{} }
func (m *MsgSetDestinationGasConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDestinationGasConfigResponse) ProtoMessage()    {}
func (*MsgSetDestinationGasConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{5}
}
func (m *MsgSetDestinationGasConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDestinationGasConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDestinationGasConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDestinationGasConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDestinationGasConfigResponse.Merge(m, src)
}
func (m *MsgSetDestinationGasConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDestinationGasConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDestinationGasConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDestinationGasConfigResponse proto.InternalMessageInfo

// MsgPayForGas ...
type MsgPayForGas struct {
	// sender ...
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// igp_id ...
	IgpId string `protobuf:"bytes,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
	// message_id ...
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// destination_domain ...
	DestinationDomain uint32 `protobuf:"varint,4,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	// gas_limit ...
	GasLimit cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=gas_limit,json=gasLimit,proto3,customtype=cosmossdk.io/math.Int" json:"gas_limit"`
	// amount ...
	Amount types.Coin `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgPayForGas) Reset()         { *m = MsgPayForGas{} }
func (m *MsgPayForGas) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGas) ProtoMessage()    {}
func (*MsgPayForGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{6}
}
func (m *MsgPayForGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGas.Merge(m, src)
}
func (m *MsgPayForGas) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGas proto.InternalMessageInfo

func (m *MsgPayForGas) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPayForGas) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *MsgPayForGas) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *MsgPayForGas) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgPayForGas) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgPayForGasResponse ...
type MsgPayForGasResponse struct {
}

func (m *MsgPayForGasResponse) Reset()         { *m = MsgPayForGasResponse{} }
func (m *MsgPayForGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForGasResponse) ProtoMessage()    {}
func (*MsgPayForGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{7}
}
func (m *MsgPayForGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForGasResponse.Merge(m, src)
}
func (m *MsgPayForGasResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForGasResponse proto.InternalMessageInfo

// MsgClaim ...
type MsgClaim struct {
	// sender ...
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// igp_id ...
	IgpId string `protobuf:"bytes,2,opt,name=igp_id,json=igpId,proto3" json:"igp_id,omitempty"`
}

func (m *MsgClaim) Reset()         { *m = MsgClaim{} }
func (m *MsgClaim) String() string { return proto.CompactTextString(m) }
func (*MsgClaim) ProtoMessage()    {}
func (*MsgClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{8}
}
func (m *MsgClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaim.Merge(m, src)
}
func (m *MsgClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaim proto.InternalMessageInfo

func (m *MsgClaim) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgClaim) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

// MsgClaimResponse ...
type MsgClaimResponse struct {
}

func (m *MsgClaimResponse) Reset()         { *m = MsgClaimResponse{} }
func (m *MsgClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimResponse) ProtoMessage()    {}
func (*MsgClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{9}
}
func (m *MsgClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimResponse.Merge(m, src)
}
func (m *MsgClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimResponse proto.InternalMessageInfo

// MsgMerkleTreeHook ...
type MsgCreateMerkleTreeHook struct {
	// sender ...
	Owner     string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	MailboxId string `protobuf:"bytes,2,opt,name=mailbox_id,json=mailboxId,proto3" json:"mailbox_id,omitempty"`
}

func (m *MsgCreateMerkleTreeHook) Reset()         { *m = MsgCreateMerkleTreeHook{} }
func (m *MsgCreateMerkleTreeHook) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMerkleTreeHook) ProtoMessage()    {}
func (*MsgCreateMerkleTreeHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{10}
}
func (m *MsgCreateMerkleTreeHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMerkleTreeHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMerkleTreeHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMerkleTreeHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMerkleTreeHook.Merge(m, src)
}
func (m *MsgCreateMerkleTreeHook) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMerkleTreeHook) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMerkleTreeHook.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMerkleTreeHook proto.InternalMessageInfo

func (m *MsgCreateMerkleTreeHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateMerkleTreeHook) GetMailboxId() string {
	if m != nil {
		return m.MailboxId
	}
	return ""
}

// MsgCreateMerkleTreeHookResponse ...
type MsgCreateMerkleTreeHookResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateMerkleTreeHookResponse) Reset()         { *m = MsgCreateMerkleTreeHookResponse{} }
func (m *MsgCreateMerkleTreeHookResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMerkleTreeHookResponse) ProtoMessage()    {}
func (*MsgCreateMerkleTreeHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{11}
}
func (m *MsgCreateMerkleTreeHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMerkleTreeHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMerkleTreeHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMerkleTreeHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMerkleTreeHookResponse.Merge(m, src)
}
func (m *MsgCreateMerkleTreeHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMerkleTreeHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMerkleTreeHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMerkleTreeHookResponse proto.InternalMessageInfo

func (m *MsgCreateMerkleTreeHookResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// MsgMerkleTreeHook ...
type MsgCreateNoopHook struct {
	// sender ...
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgCreateNoopHook) Reset()         { *m = MsgCreateNoopHook{} }
func (m *MsgCreateNoopHook) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNoopHook) ProtoMessage()    {}
func (*MsgCreateNoopHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{12}
}
func (m *MsgCreateNoopHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNoopHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNoopHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNoopHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNoopHook.Merge(m, src)
}
func (m *MsgCreateNoopHook) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNoopHook) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNoopHook.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNoopHook proto.InternalMessageInfo

func (m *MsgCreateNoopHook) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgCreateMerkleTreeHookResponse ...
type MsgCreateNoopHookResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateNoopHookResponse) Reset()         { *m = MsgCreateNoopHookResponse{} }
func (m *MsgCreateNoopHookResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNoopHookResponse) ProtoMessage()    {}
func (*MsgCreateNoopHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f936e5a203ea8b1d, []int{13}
}
func (m *MsgCreateNoopHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNoopHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNoopHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNoopHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNoopHookResponse.Merge(m, src)
}
func (m *MsgCreateNoopHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNoopHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNoopHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNoopHookResponse proto.InternalMessageInfo

func (m *MsgCreateNoopHookResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateIgp)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateIgp")
	proto.RegisterType((*MsgCreateIgpResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateIgpResponse")
	proto.RegisterType((*MsgSetIgpOwner)(nil), "hyperlane.core.post_dispatch.v1.MsgSetIgpOwner")
	proto.RegisterType((*MsgSetIgpOwnerResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgSetIgpOwnerResponse")
	proto.RegisterType((*MsgSetDestinationGasConfig)(nil), "hyperlane.core.post_dispatch.v1.MsgSetDestinationGasConfig")
	proto.RegisterType((*MsgSetDestinationGasConfigResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgSetDestinationGasConfigResponse")
	proto.RegisterType((*MsgPayForGas)(nil), "hyperlane.core.post_dispatch.v1.MsgPayForGas")
	proto.RegisterType((*MsgPayForGasResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgPayForGasResponse")
	proto.RegisterType((*MsgClaim)(nil), "hyperlane.core.post_dispatch.v1.MsgClaim")
	proto.RegisterType((*MsgClaimResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgClaimResponse")
	proto.RegisterType((*MsgCreateMerkleTreeHook)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateMerkleTreeHook")
	proto.RegisterType((*MsgCreateMerkleTreeHookResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateMerkleTreeHookResponse")
	proto.RegisterType((*MsgCreateNoopHook)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateNoopHook")
	proto.RegisterType((*MsgCreateNoopHookResponse)(nil), "hyperlane.core.post_dispatch.v1.MsgCreateNoopHookResponse")
}

func init() {
	proto.RegisterFile("hyperlane/core/post_dispatch/v1/tx.proto", fileDescriptor_f936e5a203ea8b1d)
}

var fileDescriptor_f936e5a203ea8b1d = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0xb7, 0x64, 0x89, 0x5f, 0x21, 0x22, 0xd6, 0x26, 0xd9, 0xb8, 0xea, 0xa6, 0xb2, 0x0a,
	0xa4, 0x29, 0xb1, 0xbb, 0xa9, 0x0a, 0xc8, 0xe5, 0x00, 0x49, 0xa1, 0xac, 0x44, 0xa0, 0xda, 0x72,
	0xe2, 0x62, 0xcd, 0xae, 0x87, 0xd9, 0xd1, 0xae, 0x67, 0x5c, 0xcf, 0x34, 0x9b, 0xe5, 0x54, 0x71,
	0x40, 0x15, 0x27, 0xc4, 0x15, 0x71, 0xe7, 0x98, 0x03, 0x3f, 0xa2, 0xe2, 0x54, 0x71, 0x42, 0x1c,
	0x2a, 0x94, 0x1c, 0xf2, 0x37, 0xd0, 0xd8, 0x5e, 0xef, 0x3a, 0xf1, 0x2a, 0x4e, 0xe0, 0x62, 0x79,
	0xde, 0x7b, 0xdf, 0x7b, 0xdf, 0x7b, 0x6f, 0xde, 0xd3, 0xc0, 0x46, 0x6f, 0x14, 0xe2, 0x68, 0x80,
	0x18, 0x76, 0xba, 0x3c, 0xc2, 0x4e, 0xc8, 0x85, 0xf4, 0x7c, 0x2a, 0x42, 0x24, 0xbb, 0x3d, 0x67,
	0xbf, 0xe9, 0xc8, 0x03, 0x3b, 0x8c, 0xb8, 0xe4, 0xc6, 0x7a, 0x66, 0x69, 0x2b, 0x4b, 0x3b, 0x67,
	0x69, 0xef, 0x37, 0xcd, 0xd5, 0x2e, 0x17, 0x01, 0x17, 0x4e, 0x20, 0x88, 0x02, 0x06, 0x82, 0x24,
	0x48, 0x73, 0x09, 0x05, 0x94, 0x71, 0x27, 0xfe, 0xa6, 0xa2, 0xb5, 0xc4, 0xd6, 0x8b, 0x4f, 0x4e,
	0x72, 0x48, 0x55, 0x35, 0xc2, 0x09, 0x4f, 0xe4, 0xea, 0x2f, 0x95, 0xde, 0x3e, 0x97, 0xe7, 0x28,
	0xc4, 0x63, 0x17, 0x8d, 0x94, 0x49, 0x07, 0x09, 0xec, 0xec, 0x37, 0x3b, 0x58, 0xa2, 0xa6, 0xd3,
	0xe5, 0x94, 0x25, 0x7a, 0x6b, 0x08, 0x6f, 0xec, 0x09, 0xb2, 0x1b, 0x61, 0x24, 0x71, 0x8b, 0x84,
	0x46, 0x0d, 0xe6, 0xf9, 0x90, 0xe1, 0xa8, 0xae, 0xdd, 0xd0, 0x36, 0xf4, 0x76, 0x72, 0x50, 0x52,
	0x1f, 0x33, 0x1e, 0xd4, 0x2b, 0x89, 0x34, 0x3e, 0xb8, 0xf7, 0xbf, 0x3f, 0x39, 0xdc, 0x4c, 0x2c,
	0x7e, 0x3c, 0x39, 0xdc, 0x7c, 0x6f, 0xc2, 0x6b, 0xbf, 0xe9, 0x4c, 0xbc, 0x32, 0x89, 0xa3, 0x6e,
	0x0f, 0x51, 0xf6, 0x10, 0x89, 0x47, 0x68, 0x14, 0x20, 0x21, 0x71, 0x64, 0xbd, 0x03, 0xb5, 0xe9,
	0xc0, 0x6d, 0x2c, 0x42, 0xce, 0x04, 0x36, 0x16, 0xa1, 0x42, 0xfd, 0x34, 0x7a, 0x85, 0xfa, 0xd6,
	0x0f, 0x1a, 0x2c, 0xee, 0x09, 0xf2, 0x18, 0xcb, 0x16, 0x09, 0xbf, 0x1a, 0xb3, 0x29, 0xe0, 0xb8,
	0x0c, 0x55, 0x4a, 0x42, 0x8f, 0xfa, 0x63, 0x92, 0x94, 0x84, 0x2d, 0xdf, 0xb8, 0x06, 0x3a, 0xc3,
	0x43, 0x2f, 0x01, 0x5c, 0x89, 0x35, 0x0b, 0x0c, 0x0f, 0x63, 0x4f, 0xee, 0x66, 0x3e, 0x83, 0x6b,
	0xa7, 0x33, 0x98, 0x8a, 0x6a, 0xd5, 0x61, 0x25, 0x2f, 0x19, 0x53, 0xb6, 0x9e, 0x57, 0xc0, 0x4c,
	0x54, 0x0f, 0xb0, 0x90, 0x94, 0x21, 0x49, 0xb9, 0x4a, 0x76, 0x97, 0xb3, 0x6f, 0x29, 0x31, 0xec,
	0x1c, 0xdd, 0x9d, 0xfa, 0x9f, 0xbf, 0x6f, 0xd5, 0xd2, 0x36, 0x7f, 0xe2, 0xfb, 0x11, 0x16, 0xe2,
	0xb1, 0x8c, 0x28, 0x23, 0xe7, 0x24, 0xd2, 0x87, 0x15, 0x7f, 0xe2, 0xde, 0x23, 0x48, 0x78, 0xdd,
	0x38, 0x40, 0x9c, 0xd5, 0xd5, 0xed, 0x7b, 0xf6, 0x39, 0xb7, 0xd2, 0x2e, 0x62, 0xd7, 0xae, 0xf9,
	0x05, 0x52, 0xf7, 0xfd, 0x7c, 0x61, 0xde, 0x2d, 0x28, 0x4c, 0x91, 0x37, 0xeb, 0x26, 0x58, 0xb3,
	0xb5, 0x59, 0xc1, 0xfe, 0xa8, 0xc4, 0xb7, 0xee, 0x11, 0x1a, 0x7d, 0xc6, 0xa3, 0x87, 0x48, 0x18,
	0x77, 0xa0, 0x2a, 0x30, 0xf3, 0x4b, 0xd4, 0x28, 0xb5, 0x9b, 0x55, 0xa4, 0xeb, 0x00, 0x01, 0x16,
	0x02, 0x11, 0xac, 0x54, 0x49, 0xbb, 0xf5, 0x54, 0xd2, 0xf2, 0x8d, 0x2d, 0x30, 0xa6, 0x6b, 0xe8,
	0xf3, 0x00, 0x51, 0x56, 0x7f, 0xed, 0x86, 0xb6, 0xf1, 0x66, 0x7b, 0x69, 0x4a, 0xf3, 0x20, 0x56,
	0x18, 0x2e, 0xe8, 0xaa, 0xcc, 0x03, 0x1a, 0x50, 0x59, 0x9f, 0x8f, 0x99, 0x5d, 0x7f, 0xf1, 0x6a,
	0x7d, 0xee, 0xef, 0x57, 0xeb, 0xcb, 0x09, 0x3b, 0xe1, 0xf7, 0x6d, 0xca, 0x9d, 0x00, 0xc9, 0x9e,
	0xdd, 0x62, 0xb2, 0xbd, 0x40, 0x90, 0xf8, 0x42, 0x99, 0x1b, 0x1f, 0x41, 0x15, 0x05, 0xfc, 0x29,
	0x93, 0xf5, 0x6a, 0xdc, 0x9e, 0x35, 0x3b, 0xcd, 0x47, 0x4d, 0xa2, 0x9d, 0x4e, 0xa2, 0xbd, 0xcb,
	0x29, 0xdb, 0xd1, 0x95, 0xcf, 0xdf, 0x4e, 0x0e, 0x37, 0xb5, 0x76, 0x8a, 0x71, 0x6f, 0xa9, 0xfa,
	0xa7, 0xb9, 0xaa, 0x06, 0xac, 0x9d, 0x6e, 0x40, 0x56, 0x3b, 0x6b, 0x25, 0x1e, 0xa4, 0xec, 0x9c,
	0x15, 0xf9, 0x3b, 0x58, 0x50, 0x03, 0x36, 0x40, 0x34, 0xf8, 0xdf, 0xea, 0xeb, 0xbe, 0x7d, 0x8a,
	0xd7, 0xf2, 0x99, 0x99, 0x57, 0xf1, 0x2c, 0x03, 0xde, 0x1a, 0xff, 0x67, 0x7c, 0x7e, 0xd5, 0x60,
	0x35, 0x9b, 0xf8, 0x3d, 0x1c, 0xf5, 0x07, 0xf8, 0xeb, 0x08, 0xe3, 0xcf, 0x39, 0xef, 0x5f, 0x78,
	0x44, 0x54, 0x9b, 0x11, 0x1d, 0x74, 0xf8, 0xc1, 0x84, 0xa1, 0x9e, 0x4a, 0x5a, 0xbe, 0x7b, 0x37,
	0x7f, 0x7b, 0x6f, 0x16, 0x2f, 0xa6, 0x3c, 0x07, 0xab, 0x09, 0xeb, 0x33, 0x54, 0x33, 0x77, 0xd3,
	0x01, 0x2c, 0x65, 0x90, 0x2f, 0x39, 0x0f, 0x2f, 0x93, 0xcb, 0xe5, 0xc8, 0xde, 0x86, 0xb5, 0x33,
	0x91, 0x67, 0xd1, 0xdc, 0x7e, 0xfe, 0x3a, 0x5c, 0xd9, 0x13, 0xc4, 0x78, 0x02, 0xfa, 0x64, 0xd1,
	0x6f, 0x9d, 0xbb, 0x2e, 0xa6, 0xd7, 0xb3, 0x79, 0xef, 0x42, 0xe6, 0x19, 0x95, 0x21, 0x5c, 0x9d,
	0xde, 0xdc, 0x4e, 0x19, 0x2f, 0x53, 0x00, 0xf3, 0x83, 0x0b, 0x02, 0xb2, 0xc0, 0xbf, 0x68, 0xb0,
	0x3a, 0x6b, 0x21, 0xdf, 0x2f, 0xe9, 0xb4, 0x08, 0x6c, 0xee, 0xfe, 0x07, 0x70, 0xc6, 0xee, 0x09,
	0xe8, 0x93, 0xe5, 0x57, 0xaa, 0x13, 0x99, 0x79, 0xb9, 0x4e, 0x9c, 0x59, 0x07, 0x06, 0x86, 0xf9,
	0x64, 0x17, 0xdc, 0x2a, 0xd5, 0x49, 0x65, 0x6a, 0x36, 0x4b, 0x9b, 0x66, 0x61, 0x7e, 0xd6, 0xa0,
	0x56, 0x38, 0xe2, 0x1f, 0x96, 0xbf, 0x40, 0x79, 0xa4, 0xf9, 0xf1, 0x65, 0x91, 0x19, 0xa9, 0x67,
	0x1a, 0x2c, 0x9e, 0x9a, 0xd2, 0xed, 0xf2, 0x4e, 0xc7, 0x18, 0xd3, 0xbd, 0x38, 0x66, 0x4c, 0xc1,
	0x9c, 0x7f, 0xa6, 0xf6, 0xfb, 0x8e, 0xf7, 0xe2, 0xa8, 0xa1, 0xbd, 0x3c, 0x6a, 0x68, 0xff, 0x1c,
	0x35, 0xb4, 0x9f, 0x8e, 0x1b, 0x73, 0x2f, 0x8f, 0x1b, 0x73, 0x7f, 0x1d, 0x37, 0xe6, 0xbe, 0xf9,
	0x94, 0x50, 0xd9, 0x7b, 0xda, 0xb1, 0xbb, 0x3c, 0x70, 0x64, 0xc4, 0x47, 0x7d, 0x2c, 0xc4, 0x00,
	0x47, 0x4e, 0x16, 0x72, 0x2b, 0x7d, 0xc9, 0x1d, 0x24, 0xaf, 0xbe, 0x3b, 0xdb, 0x5e, 0xfe, 0xe1,
	0x17, 0xbf, 0xfa, 0x3a, 0xd5, 0xf8, 0x59, 0x77, 0xf7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40,
	0x0c, 0x8c, 0x3b, 0xcd, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateIgp ...
	CreateIgp(ctx context.Context, in *MsgCreateIgp, opts ...grpc.CallOption) (*MsgCreateIgpResponse, error)
	// SetIgpOwner ...
	SetIgpOwner(ctx context.Context, in *MsgSetIgpOwner, opts ...grpc.CallOption) (*MsgSetIgpOwnerResponse, error)
	// SetDestinationGasConfig ...
	SetDestinationGasConfig(ctx context.Context, in *MsgSetDestinationGasConfig, opts ...grpc.CallOption) (*MsgSetDestinationGasConfigResponse, error)
	// PayForGas ...
	PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error)
	// Claim ...
	Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error)
	// CreateMerkleTreeHook ...
	CreateMerkleTreeHook(ctx context.Context, in *MsgCreateMerkleTreeHook, opts ...grpc.CallOption) (*MsgCreateMerkleTreeHookResponse, error)
	// CreateNoopHook ...
	CreateNoopHook(ctx context.Context, in *MsgCreateNoopHook, opts ...grpc.CallOption) (*MsgCreateNoopHookResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIgp(ctx context.Context, in *MsgCreateIgp, opts ...grpc.CallOption) (*MsgCreateIgpResponse, error) {
	out := new(MsgCreateIgpResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/CreateIgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetIgpOwner(ctx context.Context, in *MsgSetIgpOwner, opts ...grpc.CallOption) (*MsgSetIgpOwnerResponse, error) {
	out := new(MsgSetIgpOwnerResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/SetIgpOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDestinationGasConfig(ctx context.Context, in *MsgSetDestinationGasConfig, opts ...grpc.CallOption) (*MsgSetDestinationGasConfigResponse, error) {
	out := new(MsgSetDestinationGasConfigResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/SetDestinationGasConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayForGas(ctx context.Context, in *MsgPayForGas, opts ...grpc.CallOption) (*MsgPayForGasResponse, error) {
	out := new(MsgPayForGasResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/PayForGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error) {
	out := new(MsgClaimResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMerkleTreeHook(ctx context.Context, in *MsgCreateMerkleTreeHook, opts ...grpc.CallOption) (*MsgCreateMerkleTreeHookResponse, error) {
	out := new(MsgCreateMerkleTreeHookResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/CreateMerkleTreeHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNoopHook(ctx context.Context, in *MsgCreateNoopHook, opts ...grpc.CallOption) (*MsgCreateNoopHookResponse, error) {
	out := new(MsgCreateNoopHookResponse)
	err := c.cc.Invoke(ctx, "/hyperlane.core.post_dispatch.v1.Msg/CreateNoopHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateIgp ...
	CreateIgp(context.Context, *MsgCreateIgp) (*MsgCreateIgpResponse, error)
	// SetIgpOwner ...
	SetIgpOwner(context.Context, *MsgSetIgpOwner) (*MsgSetIgpOwnerResponse, error)
	// SetDestinationGasConfig ...
	SetDestinationGasConfig(context.Context, *MsgSetDestinationGasConfig) (*MsgSetDestinationGasConfigResponse, error)
	// PayForGas ...
	PayForGas(context.Context, *MsgPayForGas) (*MsgPayForGasResponse, error)
	// Claim ...
	Claim(context.Context, *MsgClaim) (*MsgClaimResponse, error)
	// CreateMerkleTreeHook ...
	CreateMerkleTreeHook(context.Context, *MsgCreateMerkleTreeHook) (*MsgCreateMerkleTreeHookResponse, error)
	// CreateNoopHook ...
	CreateNoopHook(context.Context, *MsgCreateNoopHook) (*MsgCreateNoopHookResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateIgp(ctx context.Context, req *MsgCreateIgp) (*MsgCreateIgpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIgp not implemented")
}
func (*UnimplementedMsgServer) SetIgpOwner(ctx context.Context, req *MsgSetIgpOwner) (*MsgSetIgpOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIgpOwner not implemented")
}
func (*UnimplementedMsgServer) SetDestinationGasConfig(ctx context.Context, req *MsgSetDestinationGasConfig) (*MsgSetDestinationGasConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDestinationGasConfig not implemented")
}
func (*UnimplementedMsgServer) PayForGas(ctx context.Context, req *MsgPayForGas) (*MsgPayForGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForGas not implemented")
}
func (*UnimplementedMsgServer) Claim(ctx context.Context, req *MsgClaim) (*MsgClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedMsgServer) CreateMerkleTreeHook(ctx context.Context, req *MsgCreateMerkleTreeHook) (*MsgCreateMerkleTreeHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerkleTreeHook not implemented")
}
func (*UnimplementedMsgServer) CreateNoopHook(ctx context.Context, req *MsgCreateNoopHook) (*MsgCreateNoopHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoopHook not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIgp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/CreateIgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIgp(ctx, req.(*MsgCreateIgp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetIgpOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetIgpOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetIgpOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/SetIgpOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetIgpOwner(ctx, req.(*MsgSetIgpOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDestinationGasConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDestinationGasConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDestinationGasConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/SetDestinationGasConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDestinationGasConfig(ctx, req.(*MsgSetDestinationGasConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayForGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/PayForGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForGas(ctx, req.(*MsgPayForGas))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Claim(ctx, req.(*MsgClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMerkleTreeHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMerkleTreeHook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMerkleTreeHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/CreateMerkleTreeHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMerkleTreeHook(ctx, req.(*MsgCreateMerkleTreeHook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNoopHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNoopHook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNoopHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperlane.core.post_dispatch.v1.Msg/CreateNoopHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNoopHook(ctx, req.(*MsgCreateNoopHook))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlane.core.post_dispatch.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIgp",
			Handler:    _Msg_CreateIgp_Handler,
		},
		{
			MethodName: "SetIgpOwner",
			Handler:    _Msg_SetIgpOwner_Handler,
		},
		{
			MethodName: "SetDestinationGasConfig",
			Handler:    _Msg_SetDestinationGasConfig_Handler,
		},
		{
			MethodName: "PayForGas",
			Handler:    _Msg_PayForGas_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Msg_Claim_Handler,
		},
		{
			MethodName: "CreateMerkleTreeHook",
			Handler:    _Msg_CreateMerkleTreeHook_Handler,
		},
		{
			MethodName: "CreateNoopHook",
			Handler:    _Msg_CreateNoopHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlane/core/post_dispatch/v1/tx.proto",
}

func (m *MsgCreateIgp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIgp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIgp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIgpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIgpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIgpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetIgpOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIgpOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIgpOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetIgpOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIgpOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIgpOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetDestinationGasConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDestinationGasConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDestinationGasConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestinationGasConfig != nil {
		{
			size, err := m.DestinationGasConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDestinationGasConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDestinationGasConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDestinationGasConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPayForGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.GasLimit.Size()
		i -= size
		if _, err := m.GasLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IgpId) > 0 {
		i -= len(m.IgpId)
		copy(dAtA[i:], m.IgpId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IgpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMerkleTreeHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMerkleTreeHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMerkleTreeHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MailboxId) > 0 {
		i -= len(m.MailboxId)
		copy(dAtA[i:], m.MailboxId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MailboxId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMerkleTreeHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMerkleTreeHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMerkleTreeHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNoopHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNoopHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNoopHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNoopHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNoopHookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNoopHookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateIgp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateIgpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetIgpOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetIgpOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetDestinationGasConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationGasConfig != nil {
		l = m.DestinationGasConfig.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetDestinationGasConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPayForGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = m.GasLimit.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPayForGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IgpId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMerkleTreeHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MailboxId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMerkleTreeHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNoopHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNoopHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateIgp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIgp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIgp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIgpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIgpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIgpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetIgpOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIgpOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIgpOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetIgpOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIgpOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIgpOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDestinationGasConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDestinationGasConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDestinationGasConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationGasConfig == nil {
				m.DestinationGasConfig = &DestinationGasConfig{}
			}
			if err := m.DestinationGasConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDestinationGasConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDestinationGasConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDestinationGasConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMerkleTreeHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMerkleTreeHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMerkleTreeHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMerkleTreeHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMerkleTreeHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMerkleTreeHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNoopHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNoopHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNoopHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNoopHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNoopHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNoopHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
