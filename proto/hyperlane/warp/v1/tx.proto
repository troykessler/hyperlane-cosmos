syntax = "proto3";
package hyperlane.warp.v1;

option go_package = "github.com/troykessler/hyperlane-cosmos/x/warp/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "hyperlane/warp/v1/types.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateCollateralToken ...
  rpc CreateCollateralToken(MsgCreateCollateralToken)
      returns (MsgCreateCollateralTokenResponse);

  // CreateSyntheticToken ...
  rpc CreateSyntheticToken(MsgCreateSyntheticToken)
      returns (MsgCreateSyntheticTokenResponse);

  // SetToken ...
  rpc SetToken(MsgSetToken) returns (MsgSetTokenResponse);

  // EnrollRemoteRouter ...
  rpc EnrollRemoteRouter(MsgEnrollRemoteRouter)
      returns (MsgEnrollRemoteRouterResponse);

  // UnrollRemoteRouter ...
  rpc UnrollRemoteRouter(MsgUnrollRemoteRouter)
      returns (MsgUnrollRemoteRouterResponse);

  // RemoteTransfer ...
  rpc RemoteTransfer(MsgRemoteTransfer) returns (MsgRemoteTransferResponse);
}

// MsgCreateCollateralToken ...
message MsgCreateCollateralToken {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/warp/v1/MsgCreateCollateralToken";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string origin_mailbox = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];
  string origin_denom = 3;
}

// MsgCreateCollateralTokenResponse ...
message MsgCreateCollateralTokenResponse { string id = 1; }

// MsgCreateSyntheticToken ...
message MsgCreateSyntheticToken {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/warp/v1/MsgCreateSyntheticToken";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string origin_mailbox = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateSyntheticTokenResponse ...
message MsgCreateSyntheticTokenResponse { string id = 1; }

// MsgSetToken ...
message MsgSetToken {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/warp/v1/MsgSetToken";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];
  string new_owner = 3;
  string ism_id = 4 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = true
  ];
}

// MsgSetTokenResponse ...
message MsgSetTokenResponse {}

// MsgEnrollRemoteRouter ...
message MsgEnrollRemoteRouter {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/warp/v1/MsgEnrollRemoteRouter";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];

  RemoteRouter remote_router = 3;
}

// MsgEnrollRemoteRouterResponse ...
message MsgEnrollRemoteRouterResponse {}

// MsgUnrollRemoteRouter ...
message MsgUnrollRemoteRouter {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/warp/v1/MsgUnrollRemoteRouter";

  // owner is the message sender.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];
  uint32 receiver_domain = 3;
}

// MsgUnrollRemoteRouterResponse ...
message MsgUnrollRemoteRouterResponse {}

// MsgRemoteTransfer ...
message MsgRemoteTransfer {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/warp/v1/MsgRemoteTransfer";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string token_id = 2 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];

  uint32 destination_domain = 3;
  string recipient = 4 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = false
  ];
  string amount = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Post Dispatch
  string custom_hook_id = 6 [
    (gogoproto.customtype) =
        "github.com/troykessler/hyperlane-cosmos/util.HexAddress",
    (gogoproto.nullable) = true
  ];
  string gas_limit = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin max_fee = 8
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  string custom_hook_metadata = 9;
}

// MsgRemoteTransferResponse ...
message MsgRemoteTransferResponse { string message_id = 1; }
