syntax = "proto3";
package hyperlane.core.post_dispatch.v1;

option go_package = "github.com/troykessler/hyperlane-cosmos/x/core/02_post_dispatch/types";

import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "hyperlane/core/post_dispatch/v1/types.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateIgp ...
  rpc CreateIgp(MsgCreateIgp) returns (MsgCreateIgpResponse);

  // SetIgpOwner ...
  rpc SetIgpOwner(MsgSetIgpOwner) returns (MsgSetIgpOwnerResponse);

  // SetDestinationGasConfig ...
  rpc SetDestinationGasConfig(MsgSetDestinationGasConfig)
      returns (MsgSetDestinationGasConfigResponse);

  // PayForGas ...
  rpc PayForGas(MsgPayForGas) returns (MsgPayForGasResponse);

  // Claim ...
  rpc Claim(MsgClaim) returns (MsgClaimResponse);

  // CreateMerkleTreeHook ...
  rpc CreateMerkleTreeHook(MsgCreateMerkleTreeHook)
      returns (MsgCreateMerkleTreeHookResponse);

  // CreateNoopHook ...
  rpc CreateNoopHook(MsgCreateNoopHook) returns (MsgCreateNoopHookResponse);
}

// MsgCreateIgp ...
message MsgCreateIgp {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/v1/MsgCreateInterchainGasPaymaster";

  // owner is the message sender.
  string owner = 1;

  // denom
  string denom = 2;
}

// MsgCreateIgpResponse ...
message MsgCreateIgpResponse { string id = 1; }

// MsgSetIgpOwner ...
message MsgSetIgpOwner {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/v1/MsgSetIgpOwner";

  // owner is the message sender.
  string owner = 1;

  // igp_id
  string igp_id = 2;

  // new_owner
  string new_owner = 3;
}

// MsgCreateIgpResponse ...
message MsgSetIgpOwnerResponse {}

// MsgSetDestinationGasConfig ...
message MsgSetDestinationGasConfig {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/v1/MsgSetDestinationGasConfig";

  // owner ...
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;

  // destination_gas_config ...
  DestinationGasConfig destination_gas_config = 3;
}

// MsgSetDestinationGasConfigResponse ...
message MsgSetDestinationGasConfigResponse {}

// MsgPayForGas ...
message MsgPayForGas {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/v1/MsgPayForGas";

  // sender ...
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;

  // message_id ...
  string message_id = 3;

  // destination_domain ...
  uint32 destination_domain = 4;

  // gas_limit ...
  string gas_limit = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // amount ...
  cosmos.base.v1beta1.Coin amount = 6
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgPayForGasResponse ...
message MsgPayForGasResponse {}

// MsgClaim ...
message MsgClaim {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "hyperlane/v1/MsgClaim";

  // sender ...
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // igp_id ...
  string igp_id = 2;
}

// MsgClaimResponse ...
message MsgClaimResponse {}

// MsgMerkleTreeHook ...
message MsgCreateMerkleTreeHook {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/v1/MsgCreateMerkleTreeHook";

  // sender ...
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string mailbox_id = 2;
}

// MsgCreateMerkleTreeHookResponse ...
message MsgCreateMerkleTreeHookResponse { string id = 1; }

// MsgMerkleTreeHook ...
message MsgCreateNoopHook {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "hyperlane/v1/MsgCreateMerkleTreeHook";

  // sender ...
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgCreateMerkleTreeHookResponse ...
message MsgCreateNoopHookResponse { string id = 1; }
